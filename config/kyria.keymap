/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>

#define BASE 0
#define MED 1
#define NAV 2
#define MOU 3
#define SYM 4
#define NUM 5
#define FUN 6
#define GAME 7
#define GNUM 8

/ {
	behaviors {
		mt: modtap {
			compatible = "zmk,behavior-hold-tap";
			label = "MODTAP";
			#binding-cells = <2>;
			tapping-term-ms = <500>;
			flavor = "balanced";
			quick-tap-ms = <150>;
			global-quick-tap;
			bindings = <&kp>, <&kp>;
		};

		lt: layertap {
			compatible = "zmk,behavior-hold-tap";
			label = "LAYERTAP";
			#binding-cells = <2>;
			tapping-term-ms = <200>;
			flavor = "balanced";
			bindings = <&mo>, <&kp>;
		};

		skq: sticky_quick_release {
			compatible = "zmk,behavior-sticky-key";
			label = "STICKY_QUICK_RELEASE";
			#binding-cells = <1>;
			bindings = <&kp>;
			release-after-ms = <1000>;
			quick-release;
		};
	};

	combos {
		compatible = "zmk,combos";
		combo_sticky_space {
			timeout-ms = <50>;
			key-positions = <30 43>;
			bindings = <&skq LSHIFT>;
		};

		combo_caps_word {
			timeout-ms = <50>;
			key-positions = <33 46>;
			bindings = <&caps_word>;
		};
	};

	keymap {
		compatible = "zmk,keymap";

		default_layer {
			bindings = <
&none           &kp Q           &kp W           &kp E           &kp R           &kp T                                                                               &kp Y           &kp U           &kp I           &kp O           &kp P           &none
&none           &mt LGUI A      &mt LALT S      &mt LCTL D      &mt LSHFT F     &kp G                                                                               &kp H           &mt LSHFT J     &mt LCTL K      &mt LALT L      &mt LGUI SQT    &none
&tog GAME       &kp Z           &kp X           &kp C           &kp V           &kp B           &none           &none               &none           &none           &kp N           &kp M           &kp COMMA       &mt RALT DOT    &kp FSLH        &none
                                                &none           &none           &lt MED ESC     &lt NAV SPACE   &lt MOU TAB         &lt SYM RET     &lt NUM BSPC    &lt FUN DEL     &none           &none
			>;
		};

		media_layer {
			bindings = <
&none           &none           &none           &none           &none           &none                                                                               &bt BT_CLR      &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &none       
&none           &kp LGUI        &kp LALT        &kp LCTL        &kp LSHFT       &none                                                                               &out OUT_BLE    &kp C_PREV      &kp C_VOL_DN    &kp C_VOL_UP    &kp C_NEXT      &none
&none           &none           &none           &none           &none           &none           &none           &none               &none           &none           &out OUT_USB    &none           &none           &none           &none           &none
                                                &none           &none           &none           &none           &none               &kp C_STOP      &kp C_PP        &kp C_MUTE      &none           &none
			>;
		};

		nav_layer {
			bindings = <
&none           &kp LC(Z)       &kp LC(X)       &kp LC(C)       &kp LC(V)       &kp LC(Y)                                                                           &kp LC(Y)       &kp LC(V)       &kp LC(C)       &kp LC(X)       &kp LC(Z)       &none       
&none           &kp LGUI        &kp LALT        &kp LCTL        &kp LSHFT       &none                                                                               &kp CAPS        &kp LEFT        &kp DOWN        &kp UP          &kp RIGHT       &none
&none           &none           &none           &none           &none           &none           &none           &none               &none           &none           &kp INS         &kp HOME        &kp PG_DN       &kp PG_UP       &kp END         &none
                                                &none           &none           &none           &none           &none               &kp RET         &kp BSPC        &kp DEL         &none           &none
			>;
		};

		mouse_layer {
			bindings = <
&none           &none           &none           &none           &none           &none                                                                               &kp LC(Y)       &kp LC(V)       &kp LC(C)       &kp LC(X)       &kp LC(Z)       &none       
&none           &kp LGUI        &kp LALT        &kp LCTL        &kp LSHFT       &none                                                                               &kp CAPS        &kp LEFT        &kp DOWN        &kp UP          &kp RIGHT       &none
&none           &none           &none           &none           &none           &none           &none           &none               &none           &none           &kp INS         &kp HOME        &kp PG_DN       &kp PG_UP       &kp END         &none
                                                &none           &none           &none           &none           &none               &kp RET         &kp BSPC        &kp DEL         &none           &none
			>;
		};

		symbol_layer {
			bindings = <
&none           &kp LBRC        &kp AMPS        &kp STAR        &kp LPAR        &kp RBRC                                                                            &none           &none           &none           &none           &none           &none       
&none           &kp COLON       &kp DOLLAR      &kp PERCENT     &kp CARET       &kp PLUS                                                                            &none           &kp LSHFT       &kp LCTL        &kp LALT        &kp LGUI        &none
&none           &kp TILDE       &kp EXCL        &kp AT_SIGN     &kp HASH        &kp PIPE        &none           &none               &none           &none           &none           &none           &none           &none           &none           &none
                                                &none           &none           &kp LPAR        &kp RPAR        &kp UNDERSCORE      &none           &none           &none           &none           &none
			>;
		};

		number_layer {
			bindings = <
&none           &kp LBKT        &kp N7          &kp N8          &kp N9          &kp RBKT                                                                            &none           &none           &none           &none           &none           &none       
&none           &kp SEMI        &kp N4          &kp N5          &kp N6          &kp EQUAL                                                                           &none           &kp LSHFT       &kp LCTL        &kp LALT        &kp LGUI        &none
&none           &kp GRAVE       &kp N1          &kp N2          &kp N3          &kp BSLH        &none           &none               &none           &none           &none           &none           &none           &none           &none           &none
                                                &none           &none           &kp DOT         &kp N0          &kp MINUS           &none           &none           &none           &none           &none
			>;
		};

		function_layer {
			bindings = <
&none           &kp F12         &kp F7          &kp F8          &kp F9          &kp PSCRN                                                                           &none           &none           &none           &none           &none           &none       
&none           &kp F11         &kp F4          &kp F5          &kp F6          &kp SLCK                                                                            &none           &kp LSHFT       &kp LCTL        &kp LALT        &kp LGUI        &none
&none           &kp F10         &kp F1          &kp F2          &kp F3          &kp PAUSE_BREAK &none           &none               &none           &none           &none           &none           &none           &none           &none           &none
                                                &none           &none           &kp ESC         &kp SPACE       &kp TAB             &none           &none           &none           &none           &none
			>;
		};

		game_layer {
			bindings = <
&mo GNUM        &kp Q           &kp W           &kp E           &kp R           &kp T                                                                               &kp Y           &kp U           &kp I           &kp O           &kp P           &none
&none           &kp A           &kp S           &kp D           &kp F           &kp G                                                                               &kp H           &mt LSHFT J     &mt LCTL K     &mt LALT L     &mt LGUI SQT   &none
&tog GAME       &kp Z           &kp X           &kp C           &kp V           &kp B           &kp RET         &kp LCTL            &none           &none           &kp N           &kp M           &kp COMMA       &mt RALT DOT   &kp FSLH        &none
                                                &kp LALT        &kp LSHFT       &kp ESC         &kp SPACE       &kp TAB             &lt SYM RET     &lt NUM BSPC    &lt FUN DEL     &none           &none
			>;
		};

		game_num_layer {
			bindings = <
&mo GNUM        &kp N1          &kp N2          &kp N3          &kp N4          &kp N5                                                                              &kp Y           &kp U           &kp I           &kp O           &kp P           &none
&none           &kp A           &kp S           &kp D           &kp F           &kp G                                                                               &kp H           &mt LSHFT J     &mt LCTL K      &mt LALT L     &mt LGUI SQT   &none
&none           &kp Z           &kp X           &kp C           &kp V           &kp B           &kp RET         &kp LCTL            &none           &none           &kp N           &kp M           &kp COMMA       &mt RALT DOT   &kp FSLH        &none
                                                &kp LALT        &kp LSHFT       &kp ESC         &kp SPACE       &kp TAB             &lt SYM RET     &lt NUM BSPC    &lt FUN DEL     &none           &none
			>;
		};
	};
};
